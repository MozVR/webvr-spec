<h1>WebVR</h1>

<pre class='metadata'>
Status: ED
ED: https://github.com/MozVR/webvr-spec/blob/master/webvr.html
Shortname: webvr
Level: 1
Editor: Vladimir Vukicevic, Mozilla http://mozilla.com/, vladimir@mozilla.com
Editor: Brandon Jones, Google http://google.com/, bajones@google.com
Abstract: This specification describes support for accessing virtual reality devices, including sensors and head-mounted displays on the Web.
Mailing List: web-vr-discuss@mozilla.org
Mailing List Archives: https://mail.mozilla.org/pipermail/web-vr-discuss/
</pre>

# Introduction # {#intro}

Hardware that enables Virtual Reality applications requires high-precision, low-latency interfaces to deliver an acceptable experience.
Other interfaces, such as device orientation events, can be repurposed to surface VR input but doing so dilutes the interface's original
intent and often does not provide the precision necessary for high-quality VR. The WebVR API provides purpose-built interfaces
to VR hardware to allow developers to build compelling, comfortable VR experiences.

# Supported Device Types # {#devtypes}

At this time there are two defined variants of VRDevice, each of which is intended to describe a specific capability of a piece of hardware
rather than all aspects of that hardware. For example, a Dedicated Head-Mounted Display such as an Oculus Rift will be exposed as two VRDevices:
An HMDVRDevice that describes the optical properties of the device, including Field of View and Interpupillary Distance, and a
PoseSensorVRDevice, which describes the HMD's position and orientation in space.

A PoseSensorVRDevice could also be provided without a corresponding HMDVRDevice to represent a piece of hardware that tracks position
but does not have a display, such as a Six-degrees-of-freedom controller.

Further, mobile devices that expose their orientation and motion data can be used in conjunction with headsets as Non-Dedicated Head-Mounted Displays.
In this case, the mobile device would constitute the PoseSensorVRDevice. However, the diversity of headset optics complicates the implementation
of the HMDVRDevice interface. Like the PoseSensorVRDevice, it needs to support provisions independent of an HMDVRDevice. 

Additional VRDevice types may be added over time to expose new hardware types or features as they becomes available to consumers.
Eye tracking is an example of a potential future interface.

# Security # {#security}

Some information about security considerations here.

# DOM Interfaces # {#dom}

This section describes the interfaces and functionality added to the DOM to support runtime access to the functionality described above.

## VREye

<pre class="idl">
enum VREye { "left", "right" };
</pre>

## VRFieldOfView

The {{VRFieldOfView}} interface represents a field of view, as given by 4 degrees describing the view from a center point.

<pre class="idl">
interface VRFieldOfViewReadOnly {
  readonly attribute double upDegrees;
  readonly attribute double rightDegrees;
  readonly attribute double downDegrees;
  readonly attribute double leftDegrees;
};

dictionary VRFieldOfViewInit {
  double upDegrees = 0.0;
  double rightDegrees = 0.0;
  double downDegrees = 0.0;
  double leftDegrees = 0.0;
};

[Constructor(optional VRFieldOfViewInit fov),
 Constructor(double upDegrees, double rightDegrees, double downDegrees, double leftDegrees)]
interface VRFieldOfView : VRFieldOfViewReadOnly {
  inherit attribute double upDegrees;
  inherit attribute double rightDegrees;
  inherit attribute double downDegrees;
  inherit attribute double leftDegrees;
};
</pre>

<div class="example">
The following code snippet creates a WebGL-compatible projection matrix from a
{{VRFieldOfView}}.

<pre>
function fieldOfViewToProjectionMatrix(fov, zNear, zFar) {
  var upTan = Math.tan(fov.upDegrees * Math.PI / 180.0);
  var downTan = Math.tan(fov.downDegrees * Math.PI / 180.0);
  var leftTan = Math.tan(fov.leftDegrees * Math.PI / 180.0);
  var rightTan = Math.tan(fov.rightDegrees * Math.PI / 180.0);
  var xScale = 2.0 / (leftTan + rightTan);
  var yScale = 2.0 / (upTan + downTan);

  var out = new Float32Array(16);
  out[0] = xScale;
  out[1] = 0.0;
  out[2] = 0.0;
  out[3] = 0.0;
  out[4] = 0.0;
  out[5] = yScale;
  out[6] = 0.0;
  out[7] = 0.0;
  out[8] = -((leftTan - rightTan) * xScale * 0.5);
  out[9] = ((upTan - downTan) * yScale * 0.5);
  out[10] = -(zNear + zFar) / (zFar - zNear);
  out[11] = -1.0;
  out[12] = 0.0;
  out[13] = 0.0;
  out[14] = -(2.0 * zFar * zNear) / (zFar - zNear);
  out[15] = 0.0;

  return out;
}
</pre>
</div>

## VRPoseState

The {{VRPoseState}} interface represents a sensor's state at a given timestamp.

<pre class="idl">
interface VRPoseState {
  readonly attribute double timeStamp;

  readonly attribute boolean hasPosition;
  readonly attribute DOMPoint? position;
  readonly attribute DOMPoint? linearVelocity;
  readonly attribute DOMPoint? linearAcceleration;

  readonly attribute boolean hasOrientation;
  // XXX should be DOMQuaternion as soon as we add that
  readonly attribute DOMPoint? orientation;
  readonly attribute DOMPoint? angularVelocity;
  readonly attribute DOMPoint? angularAcceleration;
};
</pre>

### Attributes ### {#vrposestateattributes}

<dfn attribute for=VRPoseState>timeStamp</dfn>
Monotonically increasing value that allows the author to determine if position
state data been updated from the hardware. Since values are monotonically
increasing they can be compared to determine the ordering of updates, as newer
values will always be greater than or equal to older values.

<dfn attribute for=VRPoseState>hasPosition</dfn>
True if the {{position}} attribute is valid. If false, {{position}} MUST be null.

<dfn attribute for=VRPoseState>position</dfn>
Position of the sensor at {{timeStamp}} as a 3D vector. Position is given in
meters from an origin point, which is either the position the sensor was first
read at or the position of the sensor at the point that resetSensor was last
called. The coordinate system uses these axis definitions:
<ul>
 <li>Positive X is to the user's right.</li>
 <li>Positive Y is up.</li>
 <li>Positive Z is behind the user.</li>
</ul>
All positions are given relative to the identity orientation. The w component
MUST be 0. May be null if the sensor is incapable of providing positional data.

<dfn attribute for=VRPoseState>linearVelocity</dfn>
Linear velocity of the sensor at {{timeStamp}}. The w component MUST be 0.
May be null if the sensor is incapable of providing linear velocity.

<dfn attribute for=VRPoseState>linearAcceleration</dfn>
Linear acceleration of the sensor at {{timeStamp}}. The w component MUST be 0.
May be null if the sensor is incapable of providing linear acceleration.

<dfn attribute for=VRPoseState>hasOrientation</dfn>
True if the {{orientation}} attribute is valid. If false, {{orientation}} MUST be
null.

<dfn attribute for=VRPoseState>orientation</dfn>
Orientation of the sensor at {{timeStamp}} as a quaternion. The orientation yaw
(rotation around the Y axis) is relative to the initial yaw of the sensor when
it was first read or the yaw of the sensor at the point that resetSensor was
last called. An orientation of {x: 0, y: 0, z: 0, w: 1} is considered to be
"forward". May be null if the sensor is incapable of providing
orientation data.

<dfn attribute for=VRPoseState>angularVelocity</dfn>
Angular velocity of the sensor at {{timeStamp}}. The w component MUST be 0.
May be null if the sensor is incapable of providing angular velocity.

<dfn attribute for=VRPoseState>angularAcceleration</dfn>
Angular acceleration of the sensor at {{timeStamp}}. The w component MUST be 0.
May be null if the sensor is incapable of providing angular acceleration.

## VREyeParameters

The {{VREyeParameters}} interface represents all the information required to correctly render a scene for a given eye.

<pre class="idl">
interface VREyeParameters {
  /* These values are expected to be static per-device/per-user. */
  readonly attribute VRFieldOfView minimumFieldOfView;
  readonly attribute VRFieldOfView maximumFieldOfView;
  readonly attribute VRFieldOfView recommendedFieldOfView;
  readonly attribute DOMPoint eyeTranslation;

  /* These values will vary after a FOV has been set. */
  readonly attribute VRFieldOfView currentFieldOfView;
  readonly attribute DOMRect renderRect;
};
</pre>

### Attributes ### {#vreyeparametersattributes}

<dfn attribute for=VREyeParameters>minimumFieldOfView</dfn>
Describes the minimum supported field of view for the eye.

<dfn attribute for=VREyeParameters>maximumFieldOfView</dfn>
Describes the maximum supported field of view for the eye.

<dfn attribute for=VREyeParameters>recommendedFieldOfView</dfn>
Describes the recommended field of view for the eye. It is RECOMMENDED that this
be set to a value based on user calibration.

<dfn attribute for=VREyeParameters>eyeTranslation</dfn>
Offset from the center of the user's head to the eye in meters. This value SHOULD
represent the user's interpupillary distance (IPD), but may also represent the
distance from the center point of the headset to the center point of the lens for
the given eye. Values for the left eye MUST be negative; values for the right
eye MUST be positive.

<dfn attribute for=VREyeParameters>currentFieldOfView</dfn>
The current field of view for the eye, as specified by setFieldOfView.
Defaults to {{recommendedFieldOfView}}.

<dfn attribute for=VREyeParameters>renderRect</dfn>
Describes the viewport of a canvas into which visuals for this eye should be
rendered. The {{renderRect}} for the left eye and right eye MUST NOT overlap,
and the {{renderRect}} for the rightEye MUST be to the right of the
{{renderRect}} for the left eye.

The union of the {{renderRect}}s for both eyes SHOULD describe the optimal
rendering resolution for the HMD when using {{currentFieldOfView}}, such that
the center of the user's view maintains a 1:1 pixel ratio after any distortion
to correct for HMD optics applied to the rendering.

<div class="example">
Many HMDs will distort the rendered image to counteract undesired effects
introduced by the headset optics. Because of this the optimal resolution of the
canvas will often be larger than the HMD's physical resolution to ensure that
the final image presented to the user has a 1:1 pixel ratio at the center of the
user's view. The optimal canvas resolution can be calculated from the
{{renderRect}} for both eyes as follows:

<pre>
var leftEyeParams = hmd.getEyeParameters("left");
var rightEyeParams = hmd.getEyeParameters("right");
var leftEyeRect = leftEyeParams.renderRect;
var rightEyeRect = rightEyeParams.renderRect;

canvas.width = rightEyeRect.x + rightEyeRect.width;
canvas.height = Math.max(leftEyeRect.y + leftEyeRect.height,
                         rightEyeRect.y + rightEyeRect.height);
</pre>
</div>

## VRDevice

The {{VRDevice}} interface forms the base of all VR devices supported by this API.  It includes generic information such as device IDs and descriptions.

<pre class="idl">
interface VRDevice {
  readonly attribute DOMString hardwareUnitId;
  readonly attribute DOMString deviceId;
  readonly attribute DOMString deviceName;
};
</pre>

### Attributes ### {#vrdeviceattributes}

<dfn attribute for=VRDevice>hardwareUnitId</dfn>
An identifier for the distinct hardware unit that this {{VRDevice}} is a part
of. Any {{VRDevice}} that comes from the same physical piece of hardware will
have the same {{hardwareUnitId}}.

<dfn attribute for=VRDevice>deviceId</dfn>
An identifier for this distinct sensor/device on a physical hardware device.
This shouldn't change across browser restarts, allowing configuration data to be
saved based on it.

<dfn attribute for=VRDevice>deviceName</dfn>
A user-readable name identifying the device.

## HMDVRDevice

The {{HMDVRDevice}} interface represents a {{VRDevice}} for a head-mounted display.  It contains configuration and information about the HMD.

<pre class="idl">
interface HMDVRDevice : VRDevice {
  VREyeParameters getEyeParameters(VREye whichEye);
  void setFieldOfView(optional VRFieldOfViewInit leftFOV,
                      optional VRFieldOfViewInit rightFOV,
                      optional double zNear = 0.01,
                      optional double zFar = 10000.0);
};
</pre>

### Methods ### {#hmdvrdevicemethods}

<dfn method for=HMDVRDevice>getEyeParameters(VREye whichEye)</dfn>
Return the current {{VREyeParameters}} for the given eye.

<dfn method for=HMDVRDevice>setFieldOfView(optional VRFieldOfViewInit leftFOV, optional VRFieldOfViewInit rightFOV, optional double zNear = 0.01, optional double zFar = 10000.0)</dfn>
Set the field of view for both eyes.  If either of the fields of view is null,
or if their values are all zeros, then the {{recommendedFieldOfView}} for that
eye will be used. If the field of view values for an eye exceed the
{{minimumFieldOfView}} or {{maximumFieldOfView}} values for the same eye, then the
values will be clamped to the valid range.

## PoseSensorVRDevice

The {{PoseSensorVRDevice}} interface represents a {{VRDevice}} for a sensor that can report position and/or orientation.

<pre class="idl">
interface PoseSensorVRDevice : VRDevice {
  VRPoseState getState();
  VRPoseState getImmediateState();
  void resetSensor();
};
</pre>

### Methods ### {#posesensorvrdevicemethods}

<dfn method for=HMDVRDevice>getState()</dfn>
Return a {{VRPoseState}} dictionary containing the state of this position
sensor state for the current frame (if within a requestAnimationFrame context)
or for the previous frame. This state may be predicted based on the
implementation's frame scheduling.

The VRPoseState will contain the position, orientation, and velocity and
acceleration of each of these properties. Use {{hasPosition}} and
{{hasOrientation}} to check if the associated members are valid;
If these are false, those members MUST be null.

<dfn method for=HMDVRDevice>getImmediateState()</dfn>
Return the current instantaneous sensor state.

<dfn method for=HMDVRDevice>resetSensor()</dfn>
Reset this sensor, treating its current position and orientation yaw as the
"origin/zero" values.

## Navigator Interface extension

<pre class="idl">
partial interface Navigator {
  Promise&lt;sequence&lt;VRDevice&gt&gt; getVRDevices();
};
</pre>

### Methods ### {#navigatormethods}

<dfn method for=Navigator>getVRDevices()</dfn>
Return a Promise which resolves to a list of available {{VRDevice}}s.
Applications should iterate over the list and correlate devices that share
{{hardwareUnitId}}s to access the full capabilities of a device.

<div class="example">
The following code finds the first available {{HMDVRDevice}} and its
associated {{PoseSensorVRDevice}}, if it has one.

<pre>
var gHMD, gPoseSensor;

navigator.getVRDevices().then(function(devices) {
  for (var i = 0; i < devices.length; ++i) {
    if (devices[i] instanceof HMDVRDevice) {
      gHMD = devices[i];
      break;
    }
  }

  if (gHMD) {
    for (var i = 0; i < devices.length; ++i) {
      if (devices[i] instanceof PoseSensorVRDevice &&
          devices[i].hardwareUnitId == gHMD.hardwareUnitId)) {
        gPoseSensor = devices[i];
        break;
      }
    }
  }
});
</pre>
</div>

# Acknowledgements # {#ack}
